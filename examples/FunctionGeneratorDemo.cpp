#include <Arduino.h>
#include "FunctionGenerator.h"

#define FG_UPDATE_INTERVAL_SINE_MS 100
#define FG_UPDATE_INTERVAL_SQUARE_MS 1000

// #define DEBUG // uncoment to enable output of task stats
#ifdef DEBUG
void printTaskStats();
#endif

/*-------------------------------------------------------
  Example usage: Create FunctionGenerator instances
  The arguments defines the waveform update interval (ms).
--------------------------------------------------------*/
FunctionGenerator fg1(FG_UPDATE_INTERVAL_SINE_MS);
FunctionGenerator fg2(FG_UPDATE_INTERVAL_SQUARE_MS);

void setup()
{
  Serial.begin(115200);  

  // Select waveform type (DC, Sine, Square, Saw, Triangle)
  fg1.setMode(FunctionGenerator::FgMode::Sine); 
  fg1.setAmplitude(10);
  fg1.setDcOffset(0);
  fg1.setPeriod(FG_UPDATE_INTERVAL_SINE_MS * 20); // should be >> FG_UPDATE_INTERVAL_MS for sine wave

  fg2.setMode(FunctionGenerator::FgMode::Square);
  fg2.setAmplitude(0.5);
  fg2.setDcOffset(0.5);
  fg2.setPeriod(FG_UPDATE_INTERVAL_SQUARE_MS * 2); // can be ~FG_UPDATE_INTERVAL_MS *2 for square wave
}

void loop()
{
  /*-----------------------------------------------------
    Retrieve the current waveform value generated by fg.
    The value changes continuously in the background,
    as the FreeRTOS task handles waveform generation.
  ------------------------------------------------------*/
  char buf[50];
  snprintf(buf, sizeof(buf), "FG1: %5.1f, FG2: %1.0f", fg1.getValue(), fg2.getValue());
  Serial.println(buf);
  
  delay(FG_UPDATE_INTERVAL_SINE_MS);

#ifdef DEBUG
  printTaskStats();
#endif
}

#ifdef DEBUG
/*-------------------------------------------------------
FreeRTOS configuration flags for runtime stats.
These enable CPU usage monitoring of each running task.
--------------------------------------------------------*/
#define configUSE_TRACE_FACILITY 1
#define configGENERATE_RUN_TIME_STATS 1

/*-------------------------------------------------------
  Debug helper function: printTaskStats()
  Prints the runtime statistics for each FreeRTOS task.
  Useful to verify that the FunctionGenerator task does
  not consume excessive CPU time.
--------------------------------------------------------*/
void printTaskStats()
{
  static uint32_t last = 0;
  if (millis() - last >= 1000)
  {
    last = millis();
    const int maxTasks = 20;
    TaskStatus_t taskStatusArray[maxTasks];
    uint32_t totalRunTime;

    // Get system state of all tasks
    UBaseType_t numTasks = uxTaskGetSystemState(taskStatusArray, maxTasks, &totalRunTime);

    Serial.printf("Task Name\tCPU %%\n");
    for (int i = 0; i < numTasks; i++)
    {
      float percent = (100.0f * taskStatusArray[i].ulRunTimeCounter) / totalRunTime;
      Serial.printf("%s\t%.2f%%\n", taskStatusArray[i].pcTaskName, percent);
    }
  }
}
#endif